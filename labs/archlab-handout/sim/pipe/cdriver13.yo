                            | #######################################################################
                            | # Test for copying block of size 13;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4d806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20d00000000000000 | 	irmovq $13, %rdx		# src and dst have 13 elements
0x014: 30f6e805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f77005000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 800204000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx
0x045: 72e601000000000000   | 	jl handle_remainder
                            | 
0x04e:                      | Loop:
0x04e: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x058: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# read val from src...
0x062: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x06c: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
                            | 
0x076: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12	# read val from src...
0x080: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13	# read val from src...
0x08a: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14	# read val from src...
0x094: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx
                            | 
0x09e: 50374000000000000000 | 	mrmovq 64(%rdi), %rbx
                            | 
0x0a8: 6288                 | 	andq %r8, %r8
0x0aa: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x0b4: 71c700000000000000   | 	jle judgeAndWrite1
0x0bd: c0f00100000000000000 | 	iaddq $1, %rax
0x0c7:                      | judgeAndWrite1:
0x0c7: 6299                 | 	andq %r9, %r9
0x0c9: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0d3: 71e600000000000000   | 	jle judgeAndWrite2
0x0dc: c0f00100000000000000 | 	iaddq $1, %rax
0x0e6:                      | judgeAndWrite2:
0x0e6: 62aa                 | 	andq %r10, %r10
0x0e8: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0f2: 710501000000000000   | 	jle judgeAndWrite3
0x0fb: c0f00100000000000000 | 	iaddq $1, %rax
0x105:                      | judgeAndWrite3:
0x105: 62bb                 | 	andq %r11, %r11
0x107: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x111: 712401000000000000   | 	jle judgeAndWrite4
0x11a: c0f00100000000000000 | 	iaddq $1, %rax
0x124:                      | judgeAndWrite4:
0x124: 62cc                 | 	andq %r12, %r12
0x126: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x130: 714301000000000000   | 	jle judgeAndWrite5
0x139: c0f00100000000000000 | 	iaddq $1, %rax
0x143:                      | judgeAndWrite5:
0x143: 62dd                 | 	andq %r13, %r13
0x145: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x14f: 716201000000000000   | 	jle judgeAndWrite6
0x158: c0f00100000000000000 | 	iaddq $1, %rax
0x162:                      | judgeAndWrite6:
0x162: 62ee                 | 	andq %r14, %r14
0x164: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x16e: 718101000000000000   | 	jle judgeAndWrite7
0x177: c0f00100000000000000 | 	iaddq $1, %rax
0x181:                      | judgeAndWrite7:
0x181: 6211                 | 	andq %rcx, %rcx
0x183: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi)
0x18d: 71a001000000000000   | 	jle judgeAndWrite8
0x196: c0f00100000000000000 | 	iaddq $1, %rax
0x1a0:                      | judgeAndWrite8:
0x1a0: 6233                 | 	andq %rbx, %rbx
0x1a2: 40364000000000000000 | 	rmmovq %rbx, 64(%rsi)
0x1ac: 71bf01000000000000   | 	jle update
0x1b5: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1bf:                      | update:
0x1bf: c0f74800000000000000 | 	iaddq $72, %rdi
0x1c9: c0f64800000000000000 | 	iaddq $72, %rsi
0x1d3: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx
0x1dd: 754e00000000000000   | 	jge Loop
                            | 
0x1e6:                      | handle_remainder:
0x1e6: c0f20600000000000000 | 	iaddq $6, %rdx
0x1f0: 729202000000000000   | 	jl handle_remainder_0_to_2
0x1f9:                      | handle_remainder_3_to_8:
0x1f9: c0f2fdffffffffffffff | 	iaddq $-3, %rdx
0x203: 724f02000000000000   | 	jl handle_remainder_3_to_5
                            | 
0x20c:                      | handle_remainder_6_to_8:
0x20c: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x216: 50372800000000000000 | 	mrmovq 40(%rdi), %rbx
0x220: 721503000000000000   | 	jl handle_remainder_6
0x229: 50373000000000000000 | 	mrmovq 48(%rdi), %rbx
0x233: 73ec02000000000000   | 	je handle_remainder_7
0x23c: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
0x246: 76c302000000000000   | 	jg handle_remainder_8
                            | 
0x24f:                      | handle_remainder_3_to_5:
0x24f: c0f20200000000000000 | 	iaddq $2, %rdx
0x259: 50371000000000000000 | 	mrmovq 16(%rdi), %rbx
0x263: 729003000000000000   | 	jl handle_remainder_3
0x26c: 50371800000000000000 | 	mrmovq 24(%rdi), %rbx
0x276: 736703000000000000   | 	je handle_remainder_4
0x27f: 50372000000000000000 | 	mrmovq 32(%rdi), %rbx
0x289: 763e03000000000000   | 	jg handle_remainder_5
0x292:                      | handle_remainder_0_to_2:
0x292: c0f20200000000000000 | 	iaddq $2, %rdx
0x29c: 50370000000000000000 | 	mrmovq (%rdi), %rbx
0x2a6: 73e203000000000000   | 	je handle_remainder_1
0x2af: 50370800000000000000 | 	mrmovq 8(%rdi), %rbx
0x2b9: 76b903000000000000   | 	jg handle_remainder_2
0x2c2: 90                   | 	ret
                            | 
0x2c3:                      | handle_remainder_8:
0x2c3: 6233                 | 	andq %rbx, %rbx
0x2c5: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x2cf: 50373000000000000000 | 	mrmovq 48(%rdi), %rbx
0x2d9: 72ec02000000000000   | 	jl handle_remainder_7
0x2e2: c0f00100000000000000 | 	iaddq $1, %rax
0x2ec:                      | handle_remainder_7:
0x2ec: 6233                 | 	andq %rbx, %rbx
0x2ee: 40363000000000000000 | 	rmmovq %rbx, 48(%rsi)
0x2f8: 50372800000000000000 | 	mrmovq 40(%rdi), %rbx
0x302: 721503000000000000   | 	jl handle_remainder_6
0x30b: c0f00100000000000000 | 	iaddq $1, %rax
0x315:                      | handle_remainder_6:
0x315: 6233                 | 	andq %rbx, %rbx
0x317: 40362800000000000000 | 	rmmovq %rbx, 40(%rsi)
0x321: 50372000000000000000 | 	mrmovq 32(%rdi), %rbx
0x32b: 723e03000000000000   | 	jl handle_remainder_5
0x334: c0f00100000000000000 | 	iaddq $1, %rax
0x33e:                      | handle_remainder_5:
0x33e: 6233                 | 	andq %rbx, %rbx
0x340: 40362000000000000000 | 	rmmovq %rbx, 32(%rsi)
0x34a: 50371800000000000000 | 	mrmovq 24(%rdi), %rbx
0x354: 726703000000000000   | 	jl handle_remainder_4
0x35d: c0f00100000000000000 | 	iaddq $1, %rax
0x367:                      | handle_remainder_4:
0x367: 6233                 | 	andq %rbx, %rbx
0x369: 40361800000000000000 | 	rmmovq %rbx, 24(%rsi)
0x373: 50371000000000000000 | 	mrmovq 16(%rdi), %rbx
0x37d: 729003000000000000   | 	jl handle_remainder_3
0x386: c0f00100000000000000 | 	iaddq $1, %rax
0x390:                      | handle_remainder_3:
0x390: 6233                 | 	andq %rbx, %rbx
0x392: 40361000000000000000 | 	rmmovq %rbx, 16(%rsi)
0x39c: 50370800000000000000 | 	mrmovq 8(%rdi), %rbx
0x3a6: 72b903000000000000   | 	jl handle_remainder_2
0x3af: c0f00100000000000000 | 	iaddq $1, %rax
0x3b9:                      | handle_remainder_2:
0x3b9: 6233                 | 	andq %rbx, %rbx
0x3bb: 40360800000000000000 | 	rmmovq %rbx, 8(%rsi)
0x3c5: 50370000000000000000 | 	mrmovq (%rdi), %rbx
0x3cf: 72e203000000000000   | 	jl handle_remainder_1
0x3d8: c0f00100000000000000 | 	iaddq $1, %rax
0x3e2:                      | handle_remainder_1:
0x3e2: 6233                 | 	andq %rbx, %rbx
0x3e4: 40360000000000000000 | 	rmmovq %rbx, (%rsi)
0x3ee: 720104000000000000   | 	jl Done
0x3f7: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x401:                      | Done:
0x401: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x402:                      | End:
                            | #/* $end ncopy-ys */
0x402:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 8.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x402:                      | check:
                            | 	# Return value test
0x402: 30fa0800000000000000 | 	irmovq $8,%r10
0x40c: 61a0                 | 	subq %r10,%rax
0x40e: 732a04000000000000   | 	je checkb
0x417: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x421: 706805000000000000   | 	jmp cdone
0x42a:                      | checkb:
                            | 	# Code length check
0x42a: 30f00204000000000000 | 	irmovq EndFun,%rax
0x434: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x43e: 6120                 | 	subq %rdx,%rax
0x440: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x44a: 6102                 | 	subq %rax,%rdx
0x44c: 756804000000000000   | 	jge checkm
0x455: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x45f: 706805000000000000   | 	jmp cdone
0x468:                      | checkm:
0x468: 30f2e805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x472: 30f37005000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x47c: 30f70d00000000000000 | 	irmovq $13,%rdi  # Count
0x486: 6277                 | 	andq %rdi,%rdi
0x488: 73e604000000000000   | 	je checkpre         # Skip check if count = 0
0x491:                      | mcloop:
0x491: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x49b: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x4a5: 6160                 | 	subq %rsi,%rax
0x4a7: 73c304000000000000   | 	je  mok
0x4b0: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x4ba: 706805000000000000   | 	jmp cdone
0x4c3:                      | mok:
0x4c3: 30f00800000000000000 | 	irmovq $8,%rax
0x4cd: 6002                 | 	addq %rax,%rdx	  # dest ++
0x4cf: 6003                 | 	addq %rax,%rbx    # src++
0x4d1: 30f00100000000000000 | 	irmovq $1,%rax
0x4db: 6107                 | 	subq %rax,%rdi    # cnt--
0x4dd: 769104000000000000   | 	jg mcloop
0x4e6:                      | checkpre:
                            | 	# Check for corruption
0x4e6: 30f2e005000000000000 | 	irmovq Predest,%rdx
0x4f0: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x4fa: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x504: 6120                 | 	subq %rdx,%rax
0x506: 732205000000000000   | 	je checkpost
0x50f: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x519: 706805000000000000   | 	jmp cdone
0x522:                      | checkpost:
                            | 	# Check for corruption
0x522: 30f25006000000000000 | 	irmovq Postdest,%rdx
0x52c: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x536: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x540: 6120                 | 	subq %rdx,%rax
0x542: 735e05000000000000   | 	je checkok
0x54b: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x555: 706805000000000000   | 	jmp cdone
0x55e:                      | checkok:
                            | 	# Successful checks
0x55e: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x568:                      | cdone:
0x568: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x570:                      | 	.align 8
0x570:                      | src:
0x570: 0100000000000000     | 	.quad 1
0x578: 0200000000000000     | 	.quad 2
0x580: 0300000000000000     | 	.quad 3
0x588: 0400000000000000     | 	.quad 4
0x590: fbffffffffffffff     | 	.quad -5
0x598: faffffffffffffff     | 	.quad -6
0x5a0: f9ffffffffffffff     | 	.quad -7
0x5a8: 0800000000000000     | 	.quad 8
0x5b0: 0900000000000000     | 	.quad 9
0x5b8: f6ffffffffffffff     | 	.quad -10
0x5c0: f5ffffffffffffff     | 	.quad -11
0x5c8: 0c00000000000000     | 	.quad 12
0x5d0: 0d00000000000000     | 	.quad 13
0x5d8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5e0:                      | 	.align 16
0x5e0:                      | Predest:
0x5e0: fadebc0000000000     | 	.quad 0xbcdefa
0x5e8:                      | dest:
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650:                      | Postdest:
0x650: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x658:                      | .align 8
                            | # Run time stack
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
0x690: 0000000000000000     | 	.quad 0
0x698: 0000000000000000     | 	.quad 0
0x6a0: 0000000000000000     | 	.quad 0
0x6a8: 0000000000000000     | 	.quad 0
0x6b0: 0000000000000000     | 	.quad 0
0x6b8: 0000000000000000     | 	.quad 0
0x6c0: 0000000000000000     | 	.quad 0
0x6c8: 0000000000000000     | 	.quad 0
0x6d0: 0000000000000000     | 	.quad 0
                            | 
0x6d8:                      | Stack:
