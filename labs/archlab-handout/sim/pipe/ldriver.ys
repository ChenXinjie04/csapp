#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-9, %rdx
	jl handle_remainder

Loop:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...

	mrmovq 32(%rdi), %r12	# read val from src...
	mrmovq 40(%rdi), %r13	# read val from src...
	mrmovq 48(%rdi), %r14	# read val from src...
	mrmovq 56(%rdi), %rcx

	mrmovq 64(%rdi), %rbx

	andq %r8, %r8
	rmmovq %r8, (%rsi)
	jle judgeAndWrite1
	iaddq $1, %rax
judgeAndWrite1:
	andq %r9, %r9
	rmmovq %r9, 8(%rsi)
	jle judgeAndWrite2
	iaddq $1, %rax
judgeAndWrite2:
	andq %r10, %r10
	rmmovq %r10, 16(%rsi)
	jle judgeAndWrite3
	iaddq $1, %rax
judgeAndWrite3:
	andq %r11, %r11
	rmmovq %r11, 24(%rsi)
	jle judgeAndWrite4
	iaddq $1, %rax
judgeAndWrite4:
	andq %r12, %r12
	rmmovq %r12, 32(%rsi)
	jle judgeAndWrite5
	iaddq $1, %rax
judgeAndWrite5:
	andq %r13, %r13
	rmmovq %r13, 40(%rsi)
	jle judgeAndWrite6
	iaddq $1, %rax
judgeAndWrite6:
	andq %r14, %r14
	rmmovq %r14, 48(%rsi)
	jle judgeAndWrite7
	iaddq $1, %rax
judgeAndWrite7:
	andq %rcx, %rcx
	rmmovq %rcx, 56(%rsi)
	jle judgeAndWrite8
	iaddq $1, %rax
judgeAndWrite8:
	andq %rbx, %rbx
	rmmovq %rbx, 64(%rsi)
	jle update
	iaddq $1, %rax

update:
	iaddq $72, %rdi
	iaddq $72, %rsi
	iaddq $-9, %rdx
	jge Loop

handle_remainder:
	iaddq $6, %rdx
	jl handle_remainder_0_to_2
handle_remainder_3_to_8:
	iaddq $-3, %rdx
	jl handle_remainder_3_to_5

handle_remainder_6_to_8:
	iaddq $-1, %rdx
	mrmovq 40(%rdi), %rbx
	jl handle_remainder_6
	mrmovq 48(%rdi), %rbx
	je handle_remainder_7
	mrmovq 56(%rdi), %rbx
	jg handle_remainder_8

handle_remainder_3_to_5:
	iaddq $2, %rdx
	mrmovq 16(%rdi), %rbx
	jl handle_remainder_3
	mrmovq 24(%rdi), %rbx
	je handle_remainder_4
	mrmovq 32(%rdi), %rbx
	jg handle_remainder_5
handle_remainder_0_to_2:
	iaddq $2, %rdx
	mrmovq (%rdi), %rbx
	je handle_remainder_1
	mrmovq 8(%rdi), %rbx
	jg handle_remainder_2
	ret

handle_remainder_8:
	andq %rbx, %rbx
	rmmovq %rbx, 56(%rsi)
	mrmovq 48(%rdi), %rbx
	jl handle_remainder_7
	iaddq $1, %rax
handle_remainder_7:
	andq %rbx, %rbx
	rmmovq %rbx, 48(%rsi)
	mrmovq 40(%rdi), %rbx
	jl handle_remainder_6
	iaddq $1, %rax
handle_remainder_6:
	andq %rbx, %rbx
	rmmovq %rbx, 40(%rsi)
	mrmovq 32(%rdi), %rbx
	jl handle_remainder_5
	iaddq $1, %rax
handle_remainder_5:
	andq %rbx, %rbx
	rmmovq %rbx, 32(%rsi)
	mrmovq 24(%rdi), %rbx
	jl handle_remainder_4
	iaddq $1, %rax
handle_remainder_4:
	andq %rbx, %rbx
	rmmovq %rbx, 24(%rsi)
	mrmovq 16(%rdi), %rbx
	jl handle_remainder_3
	iaddq $1, %rax
handle_remainder_3:
	andq %rbx, %rbx
	rmmovq %rbx, 16(%rsi)
	mrmovq 8(%rdi), %rbx
	jl handle_remainder_2
	iaddq $1, %rax
handle_remainder_2:
	andq %rbx, %rbx
	rmmovq %rbx, 8(%rsi)
	mrmovq (%rdi), %rbx
	jl handle_remainder_1
	iaddq $1, %rax
handle_remainder_1:
	andq %rbx, %rbx
	rmmovq %rbx, (%rsi)
	jl Done
	iaddq $1, %rax
	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad 3
	.quad -4
	.quad 5
	.quad -6
	.quad -7
	.quad -8
	.quad 9
	.quad -10
	.quad 11
	.quad -12
	.quad 13
	.quad -14
	.quad -15
	.quad -16
	.quad 17
	.quad 18
	.quad -19
	.quad 20
	.quad -21
	.quad 22
	.quad 23
	.quad -24
	.quad -25
	.quad -26
	.quad -27
	.quad 28
	.quad 29
	.quad 30
	.quad 31
	.quad 32
	.quad -33
	.quad 34
	.quad -35
	.quad 36
	.quad 37
	.quad 38
	.quad -39
	.quad -40
	.quad 41
	.quad -42
	.quad 43
	.quad 44
	.quad 45
	.quad -46
	.quad -47
	.quad -48
	.quad 49
	.quad 50
	.quad -51
	.quad 52
	.quad 53
	.quad 54
	.quad -55
	.quad 56
	.quad -57
	.quad -58
	.quad -59
	.quad -60
	.quad -61
	.quad -62
	.quad -63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
