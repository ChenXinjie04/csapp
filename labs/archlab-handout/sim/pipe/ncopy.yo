                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x000: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx
0x00a: 72ab01000000000000   | 	jl handle_remainder
                            | 
0x013:                      | Loop:
0x013: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x01d: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# read val from src...
0x027: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x031: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
                            | 
0x03b: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12	# read val from src...
0x045: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13	# read val from src...
0x04f: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14	# read val from src...
0x059: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx
                            | 
0x063: 50374000000000000000 | 	mrmovq 64(%rdi), %rbx
                            | 
0x06d: 6288                 | 	andq %r8, %r8
0x06f: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x079: 718c00000000000000   | 	jle judgeAndWrite1
0x082: c0f00100000000000000 | 	iaddq $1, %rax
0x08c:                      | judgeAndWrite1:
0x08c: 6299                 | 	andq %r9, %r9
0x08e: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x098: 71ab00000000000000   | 	jle judgeAndWrite2
0x0a1: c0f00100000000000000 | 	iaddq $1, %rax
0x0ab:                      | judgeAndWrite2:
0x0ab: 62aa                 | 	andq %r10, %r10
0x0ad: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0b7: 71ca00000000000000   | 	jle judgeAndWrite3
0x0c0: c0f00100000000000000 | 	iaddq $1, %rax
0x0ca:                      | judgeAndWrite3:
0x0ca: 62bb                 | 	andq %r11, %r11
0x0cc: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0d6: 71e900000000000000   | 	jle judgeAndWrite4
0x0df: c0f00100000000000000 | 	iaddq $1, %rax
0x0e9:                      | judgeAndWrite4:
0x0e9: 62cc                 | 	andq %r12, %r12
0x0eb: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x0f5: 710801000000000000   | 	jle judgeAndWrite5
0x0fe: c0f00100000000000000 | 	iaddq $1, %rax
0x108:                      | judgeAndWrite5:
0x108: 62dd                 | 	andq %r13, %r13
0x10a: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x114: 712701000000000000   | 	jle judgeAndWrite6
0x11d: c0f00100000000000000 | 	iaddq $1, %rax
0x127:                      | judgeAndWrite6:
0x127: 62ee                 | 	andq %r14, %r14
0x129: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x133: 714601000000000000   | 	jle judgeAndWrite7
0x13c: c0f00100000000000000 | 	iaddq $1, %rax
0x146:                      | judgeAndWrite7:
0x146: 6211                 | 	andq %rcx, %rcx
0x148: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi)
0x152: 716501000000000000   | 	jle judgeAndWrite8
0x15b: c0f00100000000000000 | 	iaddq $1, %rax
0x165:                      | judgeAndWrite8:
0x165: 6233                 | 	andq %rbx, %rbx
0x167: 40364000000000000000 | 	rmmovq %rbx, 64(%rsi)
0x171: 718401000000000000   | 	jle update
0x17a: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x184:                      | update:
0x184: c0f74800000000000000 | 	iaddq $72, %rdi
0x18e: c0f64800000000000000 | 	iaddq $72, %rsi
0x198: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx
0x1a2: 751300000000000000   | 	jge Loop
                            | 
0x1ab:                      | handle_remainder:
0x1ab: c0f20600000000000000 | 	iaddq $6, %rdx
0x1b5: 725702000000000000   | 	jl handle_remainder_0_to_2
0x1be:                      | handle_remainder_3_to_8:
0x1be: c0f2fdffffffffffffff | 	iaddq $-3, %rdx
0x1c8: 721402000000000000   | 	jl handle_remainder_3_to_5
                            | 
0x1d1:                      | handle_remainder_6_to_8:
0x1d1: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x1db: 50372800000000000000 | 	mrmovq 40(%rdi), %rbx
0x1e5: 72da02000000000000   | 	jl handle_remainder_6
0x1ee: 50373000000000000000 | 	mrmovq 48(%rdi), %rbx
0x1f8: 73b102000000000000   | 	je handle_remainder_7
0x201: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
0x20b: 768802000000000000   | 	jg handle_remainder_8
                            | 
0x214:                      | handle_remainder_3_to_5:
0x214: c0f20200000000000000 | 	iaddq $2, %rdx
0x21e: 50371000000000000000 | 	mrmovq 16(%rdi), %rbx
0x228: 725503000000000000   | 	jl handle_remainder_3
0x231: 50371800000000000000 | 	mrmovq 24(%rdi), %rbx
0x23b: 732c03000000000000   | 	je handle_remainder_4
0x244: 50372000000000000000 | 	mrmovq 32(%rdi), %rbx
0x24e: 760303000000000000   | 	jg handle_remainder_5
0x257:                      | handle_remainder_0_to_2:
0x257: c0f20200000000000000 | 	iaddq $2, %rdx
0x261: 50370000000000000000 | 	mrmovq (%rdi), %rbx
0x26b: 73a703000000000000   | 	je handle_remainder_1
0x274: 50370800000000000000 | 	mrmovq 8(%rdi), %rbx
0x27e: 767e03000000000000   | 	jg handle_remainder_2
0x287: 90                   | 	ret
                            | 
0x288:                      | handle_remainder_8:
0x288: 6233                 | 	andq %rbx, %rbx
0x28a: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x294: 50373000000000000000 | 	mrmovq 48(%rdi), %rbx
0x29e: 72b102000000000000   | 	jl handle_remainder_7
0x2a7: c0f00100000000000000 | 	iaddq $1, %rax
0x2b1:                      | handle_remainder_7:
0x2b1: 6233                 | 	andq %rbx, %rbx
0x2b3: 40363000000000000000 | 	rmmovq %rbx, 48(%rsi)
0x2bd: 50372800000000000000 | 	mrmovq 40(%rdi), %rbx
0x2c7: 72da02000000000000   | 	jl handle_remainder_6
0x2d0: c0f00100000000000000 | 	iaddq $1, %rax
0x2da:                      | handle_remainder_6:
0x2da: 6233                 | 	andq %rbx, %rbx
0x2dc: 40362800000000000000 | 	rmmovq %rbx, 40(%rsi)
0x2e6: 50372000000000000000 | 	mrmovq 32(%rdi), %rbx
0x2f0: 720303000000000000   | 	jl handle_remainder_5
0x2f9: c0f00100000000000000 | 	iaddq $1, %rax
0x303:                      | handle_remainder_5:
0x303: 6233                 | 	andq %rbx, %rbx
0x305: 40362000000000000000 | 	rmmovq %rbx, 32(%rsi)
0x30f: 50371800000000000000 | 	mrmovq 24(%rdi), %rbx
0x319: 722c03000000000000   | 	jl handle_remainder_4
0x322: c0f00100000000000000 | 	iaddq $1, %rax
0x32c:                      | handle_remainder_4:
0x32c: 6233                 | 	andq %rbx, %rbx
0x32e: 40361800000000000000 | 	rmmovq %rbx, 24(%rsi)
0x338: 50371000000000000000 | 	mrmovq 16(%rdi), %rbx
0x342: 725503000000000000   | 	jl handle_remainder_3
0x34b: c0f00100000000000000 | 	iaddq $1, %rax
0x355:                      | handle_remainder_3:
0x355: 6233                 | 	andq %rbx, %rbx
0x357: 40361000000000000000 | 	rmmovq %rbx, 16(%rsi)
0x361: 50370800000000000000 | 	mrmovq 8(%rdi), %rbx
0x36b: 727e03000000000000   | 	jl handle_remainder_2
0x374: c0f00100000000000000 | 	iaddq $1, %rax
0x37e:                      | handle_remainder_2:
0x37e: 6233                 | 	andq %rbx, %rbx
0x380: 40360800000000000000 | 	rmmovq %rbx, 8(%rsi)
0x38a: 50370000000000000000 | 	mrmovq (%rdi), %rbx
0x394: 72a703000000000000   | 	jl handle_remainder_1
0x39d: c0f00100000000000000 | 	iaddq $1, %rax
0x3a7:                      | handle_remainder_1:
0x3a7: 6233                 | 	andq %rbx, %rbx
0x3a9: 40360000000000000000 | 	rmmovq %rbx, (%rsi)
0x3b3: 72c603000000000000   | 	jl Done
0x3bc: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3c6:                      | Done:
0x3c6: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3c7:                      | End:
                            | #/* $end ncopy-ys */
